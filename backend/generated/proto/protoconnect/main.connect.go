// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: main.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto "personalfinance/generated/proto"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BankingServiceName is the fully-qualified name of the BankingService service.
	BankingServiceName = "BankingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BankingServiceGetBanksProcedure is the fully-qualified name of the BankingService's GetBanks RPC.
	BankingServiceGetBanksProcedure = "/BankingService/GetBanks"
	// BankingServiceCreateRequisitionProcedure is the fully-qualified name of the BankingService's
	// CreateRequisition RPC.
	BankingServiceCreateRequisitionProcedure = "/BankingService/CreateRequisition"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	bankingServiceServiceDescriptor                 = proto.File_main_proto.Services().ByName("BankingService")
	bankingServiceGetBanksMethodDescriptor          = bankingServiceServiceDescriptor.Methods().ByName("GetBanks")
	bankingServiceCreateRequisitionMethodDescriptor = bankingServiceServiceDescriptor.Methods().ByName("CreateRequisition")
)

// BankingServiceClient is a client for the BankingService service.
type BankingServiceClient interface {
	GetBanks(context.Context, *connect.Request[proto.GetBanksRequest]) (*connect.Response[proto.GetBanksResponse], error)
	CreateRequisition(context.Context, *connect.Request[proto.CreateRequisitionRequest]) (*connect.Response[proto.CreateRequisitionResponse], error)
}

// NewBankingServiceClient constructs a client for the BankingService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBankingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BankingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bankingServiceClient{
		getBanks: connect.NewClient[proto.GetBanksRequest, proto.GetBanksResponse](
			httpClient,
			baseURL+BankingServiceGetBanksProcedure,
			connect.WithSchema(bankingServiceGetBanksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRequisition: connect.NewClient[proto.CreateRequisitionRequest, proto.CreateRequisitionResponse](
			httpClient,
			baseURL+BankingServiceCreateRequisitionProcedure,
			connect.WithSchema(bankingServiceCreateRequisitionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// bankingServiceClient implements BankingServiceClient.
type bankingServiceClient struct {
	getBanks          *connect.Client[proto.GetBanksRequest, proto.GetBanksResponse]
	createRequisition *connect.Client[proto.CreateRequisitionRequest, proto.CreateRequisitionResponse]
}

// GetBanks calls BankingService.GetBanks.
func (c *bankingServiceClient) GetBanks(ctx context.Context, req *connect.Request[proto.GetBanksRequest]) (*connect.Response[proto.GetBanksResponse], error) {
	return c.getBanks.CallUnary(ctx, req)
}

// CreateRequisition calls BankingService.CreateRequisition.
func (c *bankingServiceClient) CreateRequisition(ctx context.Context, req *connect.Request[proto.CreateRequisitionRequest]) (*connect.Response[proto.CreateRequisitionResponse], error) {
	return c.createRequisition.CallUnary(ctx, req)
}

// BankingServiceHandler is an implementation of the BankingService service.
type BankingServiceHandler interface {
	GetBanks(context.Context, *connect.Request[proto.GetBanksRequest]) (*connect.Response[proto.GetBanksResponse], error)
	CreateRequisition(context.Context, *connect.Request[proto.CreateRequisitionRequest]) (*connect.Response[proto.CreateRequisitionResponse], error)
}

// NewBankingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBankingServiceHandler(svc BankingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bankingServiceGetBanksHandler := connect.NewUnaryHandler(
		BankingServiceGetBanksProcedure,
		svc.GetBanks,
		connect.WithSchema(bankingServiceGetBanksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bankingServiceCreateRequisitionHandler := connect.NewUnaryHandler(
		BankingServiceCreateRequisitionProcedure,
		svc.CreateRequisition,
		connect.WithSchema(bankingServiceCreateRequisitionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/BankingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BankingServiceGetBanksProcedure:
			bankingServiceGetBanksHandler.ServeHTTP(w, r)
		case BankingServiceCreateRequisitionProcedure:
			bankingServiceCreateRequisitionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBankingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBankingServiceHandler struct{}

func (UnimplementedBankingServiceHandler) GetBanks(context.Context, *connect.Request[proto.GetBanksRequest]) (*connect.Response[proto.GetBanksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("BankingService.GetBanks is not implemented"))
}

func (UnimplementedBankingServiceHandler) CreateRequisition(context.Context, *connect.Request[proto.CreateRequisitionRequest]) (*connect.Response[proto.CreateRequisitionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("BankingService.CreateRequisition is not implemented"))
}
