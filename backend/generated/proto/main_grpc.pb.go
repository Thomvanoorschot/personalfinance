// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BankingService_GetBanks_FullMethodName          = "/BankingService/GetBanks"
	BankingService_CreateRequisition_FullMethodName = "/BankingService/CreateRequisition"
	BankingService_GetBankAccounts_FullMethodName   = "/BankingService/GetBankAccounts"
	BankingService_HandleRequisition_FullMethodName = "/BankingService/HandleRequisition"
)

// BankingServiceClient is the client API for BankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingServiceClient interface {
	GetBanks(ctx context.Context, in *GetBanksRequest, opts ...grpc.CallOption) (*GetBanksResponse, error)
	CreateRequisition(ctx context.Context, in *CreateRequisitionRequest, opts ...grpc.CallOption) (*CreateRequisitionResponse, error)
	GetBankAccounts(ctx context.Context, in *GetBankAccountsRequest, opts ...grpc.CallOption) (*GetBankAccountsResponse, error)
	HandleRequisition(ctx context.Context, in *HandleRequisitionRequest, opts ...grpc.CallOption) (*HandleRequisitionResponse, error)
}

type bankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingServiceClient(cc grpc.ClientConnInterface) BankingServiceClient {
	return &bankingServiceClient{cc}
}

func (c *bankingServiceClient) GetBanks(ctx context.Context, in *GetBanksRequest, opts ...grpc.CallOption) (*GetBanksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBanksResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBanks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CreateRequisition(ctx context.Context, in *CreateRequisitionRequest, opts ...grpc.CallOption) (*CreateRequisitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequisitionResponse)
	err := c.cc.Invoke(ctx, BankingService_CreateRequisition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankAccounts(ctx context.Context, in *GetBankAccountsRequest, opts ...grpc.CallOption) (*GetBankAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankAccountsResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) HandleRequisition(ctx context.Context, in *HandleRequisitionRequest, opts ...grpc.CallOption) (*HandleRequisitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleRequisitionResponse)
	err := c.cc.Invoke(ctx, BankingService_HandleRequisition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServiceServer is the server API for BankingService service.
// All implementations must embed UnimplementedBankingServiceServer
// for forward compatibility
type BankingServiceServer interface {
	GetBanks(context.Context, *GetBanksRequest) (*GetBanksResponse, error)
	CreateRequisition(context.Context, *CreateRequisitionRequest) (*CreateRequisitionResponse, error)
	GetBankAccounts(context.Context, *GetBankAccountsRequest) (*GetBankAccountsResponse, error)
	HandleRequisition(context.Context, *HandleRequisitionRequest) (*HandleRequisitionResponse, error)
	mustEmbedUnimplementedBankingServiceServer()
}

// UnimplementedBankingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankingServiceServer struct {
}

func (UnimplementedBankingServiceServer) GetBanks(context.Context, *GetBanksRequest) (*GetBanksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanks not implemented")
}
func (UnimplementedBankingServiceServer) CreateRequisition(context.Context, *CreateRequisitionRequest) (*CreateRequisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequisition not implemented")
}
func (UnimplementedBankingServiceServer) GetBankAccounts(context.Context, *GetBankAccountsRequest) (*GetBankAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccounts not implemented")
}
func (UnimplementedBankingServiceServer) HandleRequisition(context.Context, *HandleRequisitionRequest) (*HandleRequisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequisition not implemented")
}
func (UnimplementedBankingServiceServer) mustEmbedUnimplementedBankingServiceServer() {}

// UnsafeBankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServiceServer will
// result in compilation errors.
type UnsafeBankingServiceServer interface {
	mustEmbedUnimplementedBankingServiceServer()
}

func RegisterBankingServiceServer(s grpc.ServiceRegistrar, srv BankingServiceServer) {
	s.RegisterService(&BankingService_ServiceDesc, srv)
}

func _BankingService_GetBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBanks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBanks(ctx, req.(*GetBanksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CreateRequisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CreateRequisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CreateRequisition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CreateRequisition(ctx, req.(*CreateRequisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankAccounts(ctx, req.(*GetBankAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_HandleRequisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).HandleRequisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_HandleRequisition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).HandleRequisition(ctx, req.(*HandleRequisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankingService_ServiceDesc is the grpc.ServiceDesc for BankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BankingService",
	HandlerType: (*BankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBanks",
			Handler:    _BankingService_GetBanks_Handler,
		},
		{
			MethodName: "CreateRequisition",
			Handler:    _BankingService_CreateRequisition_Handler,
		},
		{
			MethodName: "GetBankAccounts",
			Handler:    _BankingService_GetBankAccounts_Handler,
		},
		{
			MethodName: "HandleRequisition",
			Handler:    _BankingService_HandleRequisition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

const (
	UserService_RegisterUnverifiedUser_FullMethodName = "/UserService/RegisterUnverifiedUser"
	UserService_LinkUser_FullMethodName               = "/UserService/LinkUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	RegisterUnverifiedUser(ctx context.Context, in *RegisterUnverifiedUserRequest, opts ...grpc.CallOption) (*RegisterUnverifiedUserResponse, error)
	LinkUser(ctx context.Context, in *LinkUserRequest, opts ...grpc.CallOption) (*LinkUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUnverifiedUser(ctx context.Context, in *RegisterUnverifiedUserRequest, opts ...grpc.CallOption) (*RegisterUnverifiedUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUnverifiedUserResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterUnverifiedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LinkUser(ctx context.Context, in *LinkUserRequest, opts ...grpc.CallOption) (*LinkUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkUserResponse)
	err := c.cc.Invoke(ctx, UserService_LinkUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	RegisterUnverifiedUser(context.Context, *RegisterUnverifiedUserRequest) (*RegisterUnverifiedUserResponse, error)
	LinkUser(context.Context, *LinkUserRequest) (*LinkUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) RegisterUnverifiedUser(context.Context, *RegisterUnverifiedUserRequest) (*RegisterUnverifiedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUnverifiedUser not implemented")
}
func (UnimplementedUserServiceServer) LinkUser(context.Context, *LinkUserRequest) (*LinkUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUnverifiedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUnverifiedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUnverifiedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterUnverifiedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUnverifiedUser(ctx, req.(*RegisterUnverifiedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LinkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LinkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LinkUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LinkUser(ctx, req.(*LinkUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUnverifiedUser",
			Handler:    _UserService_RegisterUnverifiedUser_Handler,
		},
		{
			MethodName: "LinkUser",
			Handler:    _UserService_LinkUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

const (
	BudgetingService_GetTransactions_FullMethodName                  = "/BudgetingService/GetTransactions"
	BudgetingService_GetUncategorizedTransaction_FullMethodName      = "/BudgetingService/GetUncategorizedTransaction"
	BudgetingService_CategorizeTransactionAndContinue_FullMethodName = "/BudgetingService/CategorizeTransactionAndContinue"
	BudgetingService_GetTransactionCategoryGroups_FullMethodName     = "/BudgetingService/GetTransactionCategoryGroups"
)

// BudgetingServiceClient is the client API for BudgetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetingServiceClient interface {
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	GetUncategorizedTransaction(ctx context.Context, in *GetUncategorizedTransactionRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionResponse, error)
	CategorizeTransactionAndContinue(ctx context.Context, in *CategorizeTransactionAndContinueRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionResponse, error)
	GetTransactionCategoryGroups(ctx context.Context, in *GetTransactionCategoryGroupsRequest, opts ...grpc.CallOption) (*GetTransactionCategoryGroupsResponse, error)
}

type budgetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetingServiceClient(cc grpc.ClientConnInterface) BudgetingServiceClient {
	return &budgetingServiceClient{cc}
}

func (c *budgetingServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, BudgetingService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetUncategorizedTransaction(ctx context.Context, in *GetUncategorizedTransactionRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUncategorizedTransactionResponse)
	err := c.cc.Invoke(ctx, BudgetingService_GetUncategorizedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) CategorizeTransactionAndContinue(ctx context.Context, in *CategorizeTransactionAndContinueRequest, opts ...grpc.CallOption) (*GetUncategorizedTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUncategorizedTransactionResponse)
	err := c.cc.Invoke(ctx, BudgetingService_CategorizeTransactionAndContinue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetingServiceClient) GetTransactionCategoryGroups(ctx context.Context, in *GetTransactionCategoryGroupsRequest, opts ...grpc.CallOption) (*GetTransactionCategoryGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionCategoryGroupsResponse)
	err := c.cc.Invoke(ctx, BudgetingService_GetTransactionCategoryGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetingServiceServer is the server API for BudgetingService service.
// All implementations must embed UnimplementedBudgetingServiceServer
// for forward compatibility
type BudgetingServiceServer interface {
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	GetUncategorizedTransaction(context.Context, *GetUncategorizedTransactionRequest) (*GetUncategorizedTransactionResponse, error)
	CategorizeTransactionAndContinue(context.Context, *CategorizeTransactionAndContinueRequest) (*GetUncategorizedTransactionResponse, error)
	GetTransactionCategoryGroups(context.Context, *GetTransactionCategoryGroupsRequest) (*GetTransactionCategoryGroupsResponse, error)
	mustEmbedUnimplementedBudgetingServiceServer()
}

// UnimplementedBudgetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBudgetingServiceServer struct {
}

func (UnimplementedBudgetingServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedBudgetingServiceServer) GetUncategorizedTransaction(context.Context, *GetUncategorizedTransactionRequest) (*GetUncategorizedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUncategorizedTransaction not implemented")
}
func (UnimplementedBudgetingServiceServer) CategorizeTransactionAndContinue(context.Context, *CategorizeTransactionAndContinueRequest) (*GetUncategorizedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategorizeTransactionAndContinue not implemented")
}
func (UnimplementedBudgetingServiceServer) GetTransactionCategoryGroups(context.Context, *GetTransactionCategoryGroupsRequest) (*GetTransactionCategoryGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCategoryGroups not implemented")
}
func (UnimplementedBudgetingServiceServer) mustEmbedUnimplementedBudgetingServiceServer() {}

// UnsafeBudgetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetingServiceServer will
// result in compilation errors.
type UnsafeBudgetingServiceServer interface {
	mustEmbedUnimplementedBudgetingServiceServer()
}

func RegisterBudgetingServiceServer(s grpc.ServiceRegistrar, srv BudgetingServiceServer) {
	s.RegisterService(&BudgetingService_ServiceDesc, srv)
}

func _BudgetingService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetUncategorizedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUncategorizedTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetUncategorizedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetUncategorizedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetUncategorizedTransaction(ctx, req.(*GetUncategorizedTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_CategorizeTransactionAndContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorizeTransactionAndContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).CategorizeTransactionAndContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_CategorizeTransactionAndContinue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).CategorizeTransactionAndContinue(ctx, req.(*CategorizeTransactionAndContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetingService_GetTransactionCategoryGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionCategoryGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetingServiceServer).GetTransactionCategoryGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetingService_GetTransactionCategoryGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetingServiceServer).GetTransactionCategoryGroups(ctx, req.(*GetTransactionCategoryGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetingService_ServiceDesc is the grpc.ServiceDesc for BudgetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BudgetingService",
	HandlerType: (*BudgetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _BudgetingService_GetTransactions_Handler,
		},
		{
			MethodName: "GetUncategorizedTransaction",
			Handler:    _BudgetingService_GetUncategorizedTransaction_Handler,
		},
		{
			MethodName: "CategorizeTransactionAndContinue",
			Handler:    _BudgetingService_CategorizeTransactionAndContinue_Handler,
		},
		{
			MethodName: "GetTransactionCategoryGroups",
			Handler:    _BudgetingService_GetTransactionCategoryGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
