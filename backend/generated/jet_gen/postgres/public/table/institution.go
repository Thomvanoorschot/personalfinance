//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Institution = newInstitutionTable("public", "institution", "")

type institutionTable struct {
	postgres.Table

	// Columns
	ID                        postgres.ColumnString
	Name                      postgres.ColumnString
	IconURL                   postgres.ColumnString
	CountryCode               postgres.ColumnString
	MaxTransactionHistoryDays postgres.ColumnInteger
	CreatedAt                 postgres.ColumnTimestamp
	UpdatedAt                 postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InstitutionTable struct {
	institutionTable

	EXCLUDED institutionTable
}

// AS creates new InstitutionTable with assigned alias
func (a InstitutionTable) AS(alias string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InstitutionTable with assigned schema name
func (a InstitutionTable) FromSchema(schemaName string) *InstitutionTable {
	return newInstitutionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InstitutionTable with assigned table prefix
func (a InstitutionTable) WithPrefix(prefix string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InstitutionTable with assigned table suffix
func (a InstitutionTable) WithSuffix(suffix string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInstitutionTable(schemaName, tableName, alias string) *InstitutionTable {
	return &InstitutionTable{
		institutionTable: newInstitutionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newInstitutionTableImpl("", "excluded", ""),
	}
}

func newInstitutionTableImpl(schemaName, tableName, alias string) institutionTable {
	var (
		IDColumn                        = postgres.StringColumn("id")
		NameColumn                      = postgres.StringColumn("name")
		IconURLColumn                   = postgres.StringColumn("icon_url")
		CountryCodeColumn               = postgres.StringColumn("country_code")
		MaxTransactionHistoryDaysColumn = postgres.IntegerColumn("max_transaction_history_days")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		allColumns                      = postgres.ColumnList{IDColumn, NameColumn, IconURLColumn, CountryCodeColumn, MaxTransactionHistoryDaysColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                  = postgres.ColumnList{NameColumn, IconURLColumn, CountryCodeColumn, MaxTransactionHistoryDaysColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return institutionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		Name:                      NameColumn,
		IconURL:                   IconURLColumn,
		CountryCode:               CountryCodeColumn,
		MaxTransactionHistoryDays: MaxTransactionHistoryDaysColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedAt:                 UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
