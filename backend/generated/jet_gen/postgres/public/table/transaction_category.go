//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TransactionCategory = newTransactionCategoryTable("public", "transaction_category", "")

type transactionCategoryTable struct {
	postgres.Table

	// Columns
	ID                         postgres.ColumnString
	Slug                       postgres.ColumnString
	LabelEn                    postgres.ColumnString
	LabelNl                    postgres.ColumnString
	TransactionCategoryGroupID postgres.ColumnString
	CreatedAt                  postgres.ColumnTimestamp
	UpdatedAt                  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionCategoryTable struct {
	transactionCategoryTable

	EXCLUDED transactionCategoryTable
}

// AS creates new TransactionCategoryTable with assigned alias
func (a TransactionCategoryTable) AS(alias string) *TransactionCategoryTable {
	return newTransactionCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionCategoryTable with assigned schema name
func (a TransactionCategoryTable) FromSchema(schemaName string) *TransactionCategoryTable {
	return newTransactionCategoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionCategoryTable with assigned table prefix
func (a TransactionCategoryTable) WithPrefix(prefix string) *TransactionCategoryTable {
	return newTransactionCategoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionCategoryTable with assigned table suffix
func (a TransactionCategoryTable) WithSuffix(suffix string) *TransactionCategoryTable {
	return newTransactionCategoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionCategoryTable(schemaName, tableName, alias string) *TransactionCategoryTable {
	return &TransactionCategoryTable{
		transactionCategoryTable: newTransactionCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newTransactionCategoryTableImpl("", "excluded", ""),
	}
}

func newTransactionCategoryTableImpl(schemaName, tableName, alias string) transactionCategoryTable {
	var (
		IDColumn                         = postgres.StringColumn("id")
		SlugColumn                       = postgres.StringColumn("slug")
		LabelEnColumn                    = postgres.StringColumn("label_en")
		LabelNlColumn                    = postgres.StringColumn("label_nl")
		TransactionCategoryGroupIDColumn = postgres.StringColumn("transaction_category_group_id")
		CreatedAtColumn                  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                  = postgres.TimestampColumn("updated_at")
		allColumns                       = postgres.ColumnList{IDColumn, SlugColumn, LabelEnColumn, LabelNlColumn, TransactionCategoryGroupIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                   = postgres.ColumnList{SlugColumn, LabelEnColumn, LabelNlColumn, TransactionCategoryGroupIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return transactionCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                         IDColumn,
		Slug:                       SlugColumn,
		LabelEn:                    LabelEnColumn,
		LabelNl:                    LabelNlColumn,
		TransactionCategoryGroupID: TransactionCategoryGroupIDColumn,
		CreatedAt:                  CreatedAtColumn,
		UpdatedAt:                  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
