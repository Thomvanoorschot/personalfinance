//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Requisition = newRequisitionTable("public", "requisition", "")

type requisitionTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RequisitionTable struct {
	requisitionTable

	EXCLUDED requisitionTable
}

// AS creates new RequisitionTable with assigned alias
func (a RequisitionTable) AS(alias string) *RequisitionTable {
	return newRequisitionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequisitionTable with assigned schema name
func (a RequisitionTable) FromSchema(schemaName string) *RequisitionTable {
	return newRequisitionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RequisitionTable with assigned table prefix
func (a RequisitionTable) WithPrefix(prefix string) *RequisitionTable {
	return newRequisitionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RequisitionTable with assigned table suffix
func (a RequisitionTable) WithSuffix(suffix string) *RequisitionTable {
	return newRequisitionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRequisitionTable(schemaName, tableName, alias string) *RequisitionTable {
	return &RequisitionTable{
		requisitionTable: newRequisitionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newRequisitionTableImpl("", "excluded", ""),
	}
}

func newRequisitionTableImpl(schemaName, tableName, alias string) requisitionTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, CreatedAtColumn}
	)

	return requisitionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
